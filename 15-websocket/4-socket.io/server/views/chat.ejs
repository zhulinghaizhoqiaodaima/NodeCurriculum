<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="/javascripts/socket.io.js"></script>
</head>

<body>
  <h1>聊天室</h1>
  <h2>当前用户：
    <b id="user"></b>
  </h2>
  <input type="text" id="inputMsg"><button id="send">send</button>
  <select name="" id="select">

  </select>


  <script>
    const WebSocketType = {
      Error: 0, // 出错走它
      GroupList: 1, // 群聊
      GroupChat: 2, // 群聊
      SingleChat: 3, //私聊
    }
    let select = document.querySelector('#select')
    let sendMsg = document.querySelector('#send')
    let Msg = document.querySelector('#inputMsg')
    let userName = document.querySelector('#user')
    userName.innerHTML = localStorage.getItem('username')

    const socket = io(`ws://localhost:3000?token=${localStorage.getItem('token')}`);


    socket.on("receive", (args) => {
      const { info } = args;
      console.log(info);
    });
    socket.on(WebSocketType.Error, (msg) => {
      console.log(msg);
      localStorage.removeItem('token')
      location.href = 'login'
    })
    //群组列表
    socket.on(WebSocketType.GroupList, (data) => {
      console.log('执行群组列表更新', data);
      const { info } = data;
      select.innerHTML = `<option value="all">all</option>` + info.map(item => `
            <option value="${item.username}">${item.username}</option>
          `).join('')
    });

    //群聊
    socket.on(WebSocketType.GroupChat, (data) => {
      // console.log(data);
      console.log(`${data.user.username}:说${data.info}`);

    });
    //私聊
    socket.on(WebSocketType.SingleChat, (data) => {
      console.log(userName.value);
      console.log(data);
      console.log(`${data.user.username}:对${userName.innerHTML}说${data.info}`);
    });

    sendMsg.onclick = () => {
      // console.log(Msg.value);
      if (select.value === 'all') {
        socket.emit(WebSocketType.GroupChat, createMessage(Msg.value, select.value));
      } else {
        socket.emit(WebSocketType.SingleChat, createMessage(Msg.value, select.value));
      }
    }

    function createMessage(data, to) {
      return {
        data,
        to
      }
    }

  </script>
</body>

</html>